TASK_4
TRADITIONAL FUNCTIONS,ANONYMOUS FUNCTIONS & HIGHER ORDER FUNCTIONS
1. Write a program to reverse a string.
        Sample input: “1234abcd” 
        Expected output: “dcba4321”
q1 = "1234abcd" 
# print(type(q1))
q1_a = q1[-1:-(len(q1)+1):-1]
print(q1_a)
# print(type(q1_a))

2. Write a function that accepts a string and prints the number of uppercase letters and lowercase letters.
        Sample input: “abcSdefPghijQkl”
        Expected Output: No. of Uppercase characters : 3 No. of Lower case Characters : 12
q1 = "abcSdefPghijQkl"
def uplow(x):
    up = 0
    low = 0
    for i in q1:
        if i >="a" and i <="z": low = low + 1
        elif i >="A" and i <="Z": up = up + 1
    print("No. of Uppercase characters :", up, "No. of Lower case Characters : ", low)
uplow(q1)

3.	Create a function that takes a list and returns a new list with unique elements of the first list.

def unique(list_q3):
    list_set = set(list_q3)
    unique_list =list(list_set)
    return unique_list

list_1 = [-1, -11, -7, 1, 0, 2 ,3 , 1, 0.5, 45, -1, 6, 78, 0, 9, -11, -7]
print("The given list :", list_1)
print("New unique list : ", unique(list_1))

4.	Write a program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.

temp_q4 = input("Enter anything in a hyphen-separated sequence: ")
s="-"
q4= temp_q4.split(s)
ans = sorted(q4)
print(s.join(ans))

5. Write a program that accepts a sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
Sample input: Hello world Practice makes man perfect 
Expected output: HELLO WORLD PRACTICE MAKES MAN PERFECT

q5 = ("Hello world Practice makes man perfect")
x = q5.upper()
print(x)

6. Define a function that can receive two integral numbers in string form and compute their sum and print it in the console.
def sum(a,b):
    x=int(a)
    y=int(b)
    return (x+y)
print(sum("5","10"))

7. Define a function that can accept two strings as input and print the string with the maximum length in the console. If two strings have the same length, then the function should print both the strings line by line.

def find_max_len_string(str1,str2):
    if len(str1)==len(str2):
        print(str1)
        print(str2)
    elif len(str1)>len(str2):
        print(str1)
    else:
        print(str2)

x = input("Enter your string :")
y = input("Enter your string :")

find_max_len_string(x,y)

8. Define a function which can generate and print a tuple where the values are square of numbers between 1 and 20 (both 1 and 20 included).
def t_square_number(start,end):
    l=[]
    for i in range(start,end+1):
        ans = i*i
        l.append(ans)
    t=tuple(l)
    print(t)

(x,y)=(int(input("Enter start number :")),int(input("Enter end number :")))
t_square_number(x,y)

9. Write a function called showNumbers that takes a parameter called limit. It should print all the numbers between 0 and limit with a label to identify the even and odd numbers. 
Sample input: show Numbers(3) (where limit=3) 
Expected output:
0 EVEN 
1 ODD 
2 EVEN 
3 ODD

def showNumbers(x):
    for i in range(x+1):
        if i%2==0:
            print(i, "EVEN")
        elif i%2!=0:
            print(i, "ODD")
q9 = int(input("Enter your limit for even-odd number :"))
showNumbers(q9)

10. Write a program which uses filter() to make a list whose elements are even numbers between 1 and 20 (both included)

l = []
for i in range(1,21):
    l.append(i)
q10 = filter(lambda x:x%2==0, l)
print(list(q10))

11. Write a program which uses map() and filter() to make a list whose elements are squares of even numbers in [1,2,3,4,5,6,7,8,9,10].
Hints: Use filter() to filter even elements of the given listUse map() to generate a list of squares of the numbers in the filtered  list. Use lambda() to define anonymous functions.

l = []
for i in range(1,11):
    l.append(i)
q11 = filter(lambda x:x%2==0, l)
num=list(q11)
ans=map(lambda x:x*x, num)
print(list(ans))

12. Write a function to compute 5/0 and use try/except to catch the exceptions

13.	Flatten the list  [1,2,3,4,5,6,7]  into 1234567  using reduce().

14.	Write a program in Python to find the values which are not divisible by 3 but are a multiple of 7. Make sure to use only higher order functions. 

user_range_start_value = int(input("Enter your value of staring range :" ))
user_range_end_value = int(input("Enter your value of end range:" ))
user_range_end_value +=1
#print(list(range(user_range_start_value,user_range_end_value)))
x= filter(lambda i: i%3!=0 and i%7==0, range(user_range_start_value,user_range_end_value))
print(list(x))

15. Write a program in Python to  multiply the elements of a list by itself using a traditional function and pass the function to map() to complete the operation.

def mul__By_self_list_element (l):
    ans = l*l
    return ans
user_list=[1,2,3,4,5,6,6,8,9,7,0]
x=map(mul__By_self_list_element, user_list)
print(type(x))
print(list(x))

16. What is the output of the following codes:
(i) def foo():
        try:
            return 1    
        finally:   
            return 2 
    k = foo() 
    print(k)

(ii) def a():
        try:
            f(x, 4)    
        finally:
            print('after f')
            print('after f?')
    a()









