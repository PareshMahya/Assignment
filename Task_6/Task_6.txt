##______ Task-6 ______
#GENERATORS, LIST COMPREHENSION AND DECORATORS

#1.	Write a program in Python to find out the character in a string which is uppercase using list comprehension. 

usr_ip = input("Enter your string :")
ans = [i for i in usr_ip if i.isupper()]
print(ans)

#2.	Write a program to construct a dictionary from the two lists containing the names of students and their corresponding subjects. The dictionary should map the students with their respective subjects.
#   Let’s see how to do this using for loops and dictionary comprehension. 
#   HINT - Use Zip function also
#   Sample input: students = ['Smit', 'Jaya', 'Rayyan'] subjects = ['CSE', 'Networking', 'Operating System']
#   Expected output: {‘Smit’ : ’CSE’ , ’Jaya’ : ’Networking’ , ’Rayyan’ : ’Operating System’} 

students = ['Smit', 'Jaya', 'Rayyan'] 
subjects = ['CSE', 'Networking', 'Operating System']
ans = zip(students,subjects)
print(dict(ans)

#3.	Learn More about Yield, next and Generators
Yield - 
    "yield" is the keyword for the generator function. "yield" is the same as "return" in the normal function.
    "yield" and "return" will return some value from a function. 
    But "return" statement will save the value and terminate the function, while the "yield" statement pauses the function, save the value and later continues from there on successive calls."

next - 
    "next" is a function to manually iterate through all the items of an iterator. When we reach the end and there is no more data to be returned, it will raise the StopIteration 

Generators -  
    Generators is a function that returns an object (iterator) which we can iterate over (one value at a time). 
    A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the "yield" keyword rather than "return."  
    If the body of a def contains "yield", the function automatically becomes a generator function.

#4.	Write a program in Python using generators to reverse the string. 
#   Input String = “Consultadd Training” 

def rev_str(my_str):
    my_str ="".join(reversed(my_str))
    yield my_str

x = rev_str("Consultadd Training")
print(x.__next__())

#5.	Write an example on decorators.

# Modification of original function
def use_zero(func):
    def inner(a,b):
        if a==0 or b==0:
            print("Multiplication of zero is always zero!")
            return
        return func(a,b)
    return inner
@use_zero

# original function
def mul(a,b):
    print(a*b)

# call original function
x = mul(1,0)